from langchain.document_loaders import PyMuPDFLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.embeddings import HuggingFaceEmbeddings
from langchain.vectorstores import FAISS
from langchain.chat_models import ChatOpenAI
from langchain.chains import RetrievalQA

# Load PDF using PyMuPDFLoader
loader = PyMuPDFLoader("company_guidelines.pdf")
documents = loader.load()

# Split into chunks
text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=100)
chunks = text_splitter.split_documents(documents)

# Create embeddings and vector store
embeddings = HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")
vector_store = FAISS.from_documents(chunks, embeddings)

# Initialize LLM with strict instructions to avoid hallucination
llm = ChatOpenAI(model="gpt-3.5-turbo", temperature=0)

# Create retrieval chain
qa_chain = RetrievalQA.from_chain_type(
    llm=llm,
    chain_type="stuff",
    retriever=vector_store.as_retriever(),
    return_source_documents=True,
    chain_type_kwargs={"prompt": """
        Answer the query based only on the provided document context. If the information is not available, respond with 'The information is not available in the provided document.'
    """}
)

# Query the chatbot
query = "What is the company's policy on remote work?"
response = qa_chain({"query": query})
print(response["result"])
